{
    "analyzer": "CodeQL",
    "mapping": {
        "cpp/dead-code-condition": {
            "cwe": "CWE-561",
            "description": "The condition of the branching statement always evaluates to the same value. This means that only one branch will ever be executed."
        },
        "cpp/dead-code-function": {
            "cwe": "CWE-561",
            "description": "Unused functions may increase object size, decrease readability, and create the possibility of misuse."
        },
        "cpp/dead-code-goto": {
            "cwe": "CWE-561",
            "description": "A goto or break statement is followed by unreachable code."
        },
        "cpp/descriptor-may-not-be-closed": {
            "cwe": "CWE-775",
            "description": "Failing to close resources in the function that opened them makes it difficult to avoid and detect resource leaks."
        },
        "cpp/descriptor-never-closed": {
            "cwe": "CWE-775",
            "description": "Functions that always return before closing the socket they opened leak resources."
        },
        "cpp/file-may-not-be-closed": {
            "cwe": "CWE-775",
            "description": "A function may return before closing a file that was opened in the function. Closing resources in the same function that opened them ties the lifetime of the resource to that of the function call, making it easier to avoid and detect resource leaks."
        },
        "cpp/file-never-closed": {
            "cwe": "CWE-775",
            "description": "A function always returns before closing a file that was opened in the function. Closing resources in the same function that opened them ties the lifetime of the resource to that of the function call, making it easier to avoid and detect resource leaks."
        },
        "cpp/global-use-before-init": {
            "cwe": "CWE-457",
            "description": "Using an uninitialized variable may lead to undefined results."
        },
        "cpp/inconsistent-nullness-testing": {
            "cwe": "CWE-476",
            "description": "A dereferenced pointer is not checked for nullness in this location, but it is checked in other locations. Dereferencing a null pointer leads to undefined results."
        },
        "cpp/initialization-not-run": {
            "cwe": "CWE-456",
            "description": "Not running initialization code may lead to unexpected behavior."
        },
        "cpp/late-negative-test": {
            "cwe": "CWE-823",
            "description": "Accessing a pointer or array using an offset before checking if the value is positive may result in unexpected behavior."
        },
        "cpp/memory-may-not-be-freed": {
            "cwe": "CWE-401",
            "description": "A function may return before freeing memory that was allocated in the function. Freeing all memory allocated in the function before returning ties the lifetime of the memory blocks to that of the function call, making it easier to avoid and detect memory leaks."
        },
        "cpp/memory-never-freed": {
            "cwe": "CWE-401",
            "description": "A function always returns before freeing memory that was allocated in the function. Freeing all memory allocated in the function before returning ties the lifetime of the memory blocks to that of the function call, making it easier to avoid and detect memory leaks."
        },
        "cpp/missing-negativity-test": {
            "cwe": "CWE-823",
            "description": "Using a return value as a pointer offset without checking that the value is positive may lead to buffer overruns."
        },
        "cpp/missing-null-test": {
            "cwe": "CWE-476",
            "description": "Dereferencing an untested value from a function that can return null may lead to undefined behavior."
        },
        "cpp/new-free-mismatch": {
            "cwe": "CWE-401",
            "description": "An object that was allocated with 'malloc' or 'new' is being freed using a mismatching 'free' or 'delete'."
        },
        "cpp/not-initialised": {
            "cwe": "CWE-457",
            "description": "Using an uninitialized variable may lead to undefined results."
        },
        "cpp/overflow-calculated": {
            "cwe": "CWE-120",
            "description": "A buffer allocated using 'malloc' may not have enough space for a string that is being copied into it. The operation can cause a buffer overrun. Make sure that the buffer contains enough room for the string (including the zero terminator, CWE-131)."
        },
        "cpp/overflow-destination": {
            "cwe": "CWE-119",
            "description": "Calling a copy operation with a size derived from the source buffer instead of the destination buffer may result in a buffer overflow (CWE-131)."
        },
        "cpp/static-buffer-overflow": {
            "cwe": "CWE-119",
            "description": "Exceeding the size of a static array during write or access operations may result in a buffer overflow (CWE-131)."
        },
        "cpp/return-stack-allocated-object": {
            "cwe": "CWE-562",
            "description": "Using a pointer to stack memory after the function has returned gives undefined results."
        },
        "cpp/return-value-ignored": {
            "cwe": "CWE-252",
            "description": "A call to a function ignores its return value, but more than 80% of the total number of calls to the function check the return value. Check the return value of functions consistently, especially for functions like 'fread' or the 'scanf' functions that return the status of the operation."
        },
        "cpp/suspicious-allocation-size": {
            "cwe": "CWE-131",
            "description": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain multiple instances of the type of the pointer may result in a buffer overflow (CWE-122)."
        },
        "cpp/allocation-too-small": {
            "cwe": "CWE-131",
            "description": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain an instance of the type of the pointer may result in a buffer overflow (CWE-122)."
        },
        "cpp/unused-variable": {
            "cwe": "CWE-563",
            "description": "Assigning a value to a variable that is not used may indicate an error in the code."
        },
        "cpp/use-after-free": {
            "cwe": "CWE-416",
            "description": "An allocated memory block is used after it has been freed. Behavior in such cases is undefined and can cause memory corruption."
        },
        "cpp/alloca-in-loop": {
            "cwe": "CWE-770",
            "description": "Using alloca in a loop can lead to a stack overflow (CWE-770)"
        },
        "cpp/improper-null-termination": {
            "cwe": "CWE-170",
            "description": "Using a string that may not be null terminated as an argument to a string function can result in buffer overflow or buffer over-read. (CWE-170, CWE-665)"
        },
        "cpp/network-to-host-function-as-array-bound": {
            "cwe": "CWE-198",
            "description": "Using the result of a network-to-host byte order function, such as ntohl, as an array bound or length value without checking it may result in buffer overflows or other vulnerabilties."
        },
        "cpp/pointer-overflow-check": {
            "cwe": "CWE-469",
            "description": "Adding a value to a pointer to check if it overflows relies on undefined behavior and may lead to memory corruption."
        },
        "cpp/potential-buffer-overflow": {
            "cwe": "CWE-676",
            "description": "Using a library function that does not check buffer bounds requires the surrounding program to be very carefully written to avoid buffer overflows. (CWE-676)"
        },
        "cpp/return-c-str-of-std-string": {
            "cwe": "CWE-416",
            "description": "Returning the c_str of a locally allocated std::string could cause the program to crash or behave non-deterministically because the memory is deallocated when the std::string goes out of scope."
        },
        "cpp/return-stack-allocated-memory": {
            "cwe": "CWE-825",
            "description": "A function returns a pointer to a stack-allocated region of memory. This memory is deallocated at the end of the function, which may lead the caller to dereference a dangling pointer. (CWE-825)"
        },
        "cpp/stack-address-escape": {
            "cwe": "CWE-416",
            "description": "Storing the address of a local variable in non-local memory can cause a dangling pointer bug if the address is used after the function returns."
        },
        "cpp/bad-strncpy-size": {
            "cwe": "CWE-119",
            "description": "Calling 'strncpy' with the size of the source buffer as the third argument may result in a buffer overflow. (CWE-676, CWE-119, CWE-251)"
        },
        "cpp/suspicious-call-to-memset": {
            "cwe": "CWE-676",
            "description": "Use of memset where the size argument is computed as the size of some non-struct type. When initializing a buffer, you should specify its size as <number of elements> * <size of one element> to ensure portability. (CWE-676)"
        },
        "cpp/unsafe-strncat": {
            "cwe": "CWE-119",
            "description": "Calling 'strncat' with the size of the destination buffer as the third argument may result in a buffer overflow. (CWE-676, CWE-119, CWE-251)"
        },
        "cpp/suspicious-sizeof": {
            "cwe": "CWE-467",
            "description": "Taking 'sizeof' of an array parameter is often mistakenly thought to yield the size of the underlying array, but it always yields the machine pointer size. (CWE-467)"
        },
        "cpp/uninitialized-local": {
            "cwe": "CWE-457",
            "description": "Reading from a local variable that has not been assigned to will typically yield garbage. (CWE-665, CWE-457)"
        },
        "cpp/unsafe-strcat": {
            "cwe": "CWE-120",
            "description": "Using 'strcat' without checking the size of the source string may result in a buffer overflow (CWE-676, CWE-120, CWE-251)"
        },
        "cpp/non-constant-format": {
            "cwe": "CWE-134",
            "description": "Passing a non-constant 'format' string to a printf-like function can lead to a mismatch between the number of arguments defined by the 'format' and the number of arguments actually passed to the function. If the format string ultimately stems from an untrusted source, this can be used for exploits. (CWE-134)"
        },
        "cpp/overflowing-snprintf": {
            "cwe": "CWE-119",
            "description": "Using the return value from snprintf without proper checks can cause overflow."
        },
        "cpp/too-many-format-arguments": {
            "cwe": "CWE-628",
            "description": "A printf-like function called with too many arguments will ignore the excess arguments and output less than might have been intended."
        },
        "cpp/wrong-number-format-arguments": {
            "cwe": "CWE-685",
            "description": "Calling a printf-like function with too few arguments can be a source of security issues. (CWE-685)"
        },
        "cpp/wrong-type-format-argument": {
            "cwe": "CWE-686",
            "description": "Calling a printf-like function with the wrong type of arguments causes unpredictable behavior. (CWE-686)"
        },
        "cpp/ambiguously-signed-bit-field": {
            "cwe": "CWE-190",
            "description": "Bit fields with integral types should have explicit signedness only. For example, use `unsigned int` rather than `int`. It is implementation specific whether an `int`-typed bit field is signed, so there could be unexpected sign extension or overflow. (CWE-190)"
        },
        "cpp/inconsistent-call-on-result": {
            "cwe": "CWE-252",
            "description": "A function is called, and the same operation is usually performed on the return value - for example, free, delete, close etc. However, in some cases it is not performed. These unusual cases may indicate misuse of the API and could cause resource leaks. (CWE-252)"
        },
        "cpp/inconsistent-null-check": {
            "cwe": "CWE-476",
            "description": "The result value of a function is often checked for nullness, but not always. Since the value is mostly checked, it is likely that the function can return null values in some cases, and omitting the check could crash the program. (CWE-476)"
        },
        "cpp/redundant-null-check-simple": {
            "cwe": "CWE-476",
            "description": "Checking a pointer for nullness after dereferencing it is likely to be a sign that either the check can be removed, or it should be moved before the dereference. (CWE-476)"
        },
        "cpp/path-injection": {
            "cwe": "CWE-22",
            "description": "Accessing paths influenced by users can allow an attacker to access unexpected resources. (CWE-022, CWE-023, CWE-036, CWE-073)"
        },
        "cpp/command-line-injection": {
            "cwe": "CWE-78",
            "description": "Using user-supplied data in an OS command, without neutralizing special elements, can make code vulnerable to command injection. (CWE-078, CWE-088)"
        },
        "cpp/cgi-xss": {
            "cwe": "CWE-79",
            "description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability. (CWE-079)"
        },
        "cpp/sql-injection": {
            "cwe": "CWE-89",
            "description": "Including user-supplied data in a SQL query without neutralizing special elements can make code vulnerable to SQL Injection. (CWE-089)"
        },
        "cpp/uncontrolled-process-operation": {
            "cwe": "CWE-114",
            "description": "Using externally controlled strings in a process operation can allow an attacker to execute malicious commands. (CWE-114)"
        },
        "cpp/overflow-buffer": {
            "cwe": "CWE-119",
            "description": "Incorrect use of a function that accesses a memory buffer may read or write data past the end of that buffer. (CWE-119, CWE-121, CWE-122, CWE-126)"
        },
        "cpp/badly-bounded-write": {
            "cwe": "CWE-120",
            "description": "Buffer write operations with a length parameter that does not match the size of the destination buffer may overflow. (CWE-120, CWE-787, CWE-805)"
        },
        "cpp/overrunning-write": {
            "cwe": "CWE-120",
            "description": "Buffer write operations that do not control the length of data written may overflow. (CWE-120, CWE-787, CWE-805)"
        },
        "cpp/overrunning-write-with-float": {
            "cwe": "CWE-120",
            "description": "Buffer write operations that do not control the length of data written may overflow when floating point inputs take extreme values. (CWE-120, CWE-787, CWE-805)"
        },
        "cpp/unbounded-write": {
            "cwe": "CWE-120",
            "description": "Buffer write operations that do not control the length of data written may overflow. (CWE-120, CWE-787, CWE-805)"
        },
        "cpp/unterminated-variadic-call": {
            "cwe": "CWE-121",
            "description": "Calling a variadic function without a sentinel value may result in a buffer overflow if the function expects a specific value to terminate the argument list. (CWE-121)"
        },
        "cpp/unclear-array-index-validation": {
            "cwe": "CWE-129",
            "description": "Accessing an array without first checking that the index is within the bounds of the array can cause undefined behavior and can also be a security risk. (CWE-129)"
        },
        "cpp/no-space-for-terminator": {
            "cwe": "CWE-120",
            "description": "Allocating a buffer using 'malloc' without ensuring that there is always space for the entire string and a zero terminator can cause a buffer overrun. (CWE-131, CWE-120, CWE-122)"
        },
        "cpp/tainted-format-string": {
            "cwe": "CWE-134",
            "description": "Using externally-controlled format strings in printf-style functions can lead to buffer overflows or data representation problems. (CWE-134)"
        },
        "cpp/tainted-format-string-through-global": {
            "cwe": "CWE-134",
            "description": "Using externally-controlled format strings in printf-style functions can lead to buffer overflows or data representation problems. (CWE-134)"
        },
        "cpp/user-controlled-null-termination-tainted": {
            "cwe": "CWE-170",
            "description": "String operations on user-controlled strings can result in buffer overflow or buffer over-read. (CWE-170)"
        },
        "cpp/tainted-arithmetic": {
            "cwe": "CWE-190",
            "description": "Arithmetic operations on user-controlled data that is not validated can cause overflows. (CWE-190, CWE-191)"
        },
        "cpp/uncontrolled-arithmetic": {
            "cwe": "CWE-190",
            "description": "Arithmetic operations on uncontrolled data that is not validated can cause overflows. (CWE-190, CWE-191)"
        },
        "cpp/arithmetic-with-extreme-values": {
            "cwe": "CWE-190",
            "description": "If a variable is assigned the maximum or minimum value for that variable's type and is then used in an arithmetic expression, this may result in an overflow. (CWE-190, CWE-191)"
        },
        "cpp/comparison-with-wider-type": {
            "cwe": "CWE-190",
            "description": "Comparisons between types of different widths in a loop condition can cause the loop to behave unexpectedly. (CWE-190, CWE-197, CWE-835)"
        },
        "cpp/integer-overflow-tainted": {
            "cwe": "CWE-190",
            "description": "A user-controlled integer arithmetic expression that is not validated can cause overflows. (CWE-190, CWE-197, CWE-681)"
        },
        "cpp/uncontrolled-allocation-size": {
            "cwe": "CWE-190",
            "description": "Allocating memory with a size controlled by an external user can result in integer overflow. (CWE-190)"
        },
        "cpp/hresult-boolean-conversion": {
            "cwe": "CWE-253",
            "description": "Casting an HRESULT to/from a Boolean type and then using it in a test expression will yield an incorrect result because success (S_OK) in HRESULT is indicated by a value of 0. (CWE-253)"
        },
        "cpp/user-controlled-bypass": {
            "cwe": "CWE-290",
            "description": "Authentication by checking that the peer's address matches a known IP or web address is unsafe as it is vulnerable to spoofing attacks. (CWE-290)"
        },
        "cpp/cleartext-storage-buffer": {
            "cwe": "CWE-312",
            "description": "Storing sensitive information in cleartext can expose it to an attacker. (CWE-312)"
        },
        "cpp/cleartext-storage-file": {
            "cwe": "CWE-313",
            "description": "Storing sensitive information in cleartext can expose it to an attacker. CWE-313)"
        },
        "cpp/cleartext-storage-database": {
            "cwe": "CWE-313",
            "description": "Storing sensitive information in a non-encrypted database can expose it to an attacker. (CWE-313)"
        },
        "cpp/weak-cryptographic-algorithm": {
            "cwe": "CWE-327",
            "description": "Using broken or weak cryptographic algorithms can allow an attacker to compromise security. (CWE-327)"
        },
        "cpp/openssl-heartbleed": {
            "cwe": "CWE-788",
            "description": "Using an old version of OpenSSL can allow remote attackers to retrieve portions of memory. (CWE-327, CWE-788)"
        },
        "cpp/toctou-race-condition": {
            "cwe": "CWE-367",
            "description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations. (CWE-367)"
        },
        "cpp/unsafe-create-process-call": {
            "cwe": "CWE-428",
            "description": "Calling a function of the CreateProcess* family of functions, where the path contains spaces, introduces a security vulnerability. (CWE-428)"
        },
        "cpp/conditionally-uninitialized-variable": {
            "cwe": "CWE-457",
            "description": "When an initialization function is used to initialize a local variable, but the returned status code is not checked, the variable may be left in an uninitialized state, and reading the variable may result in undefined behavior. (CWE-457)"
        },
        "cpp/suspicious-pointer-scaling": {
            "cwe": "CWE-468",
            "description": "Implicit scaling of pointer arithmetic expressions can cause buffer overflow conditions. (CWE-468)"
        },
        "cpp/incorrect-pointer-scaling-char": {
            "cwe": "CWE-468",
            "description": "Implicit scaling of pointer arithmetic expressions can cause buffer overflow conditions. (CWE-468)"
        },
        "cpp/suspicious-pointer-scaling-void": {
            "cwe": "CWE-468",
            "description": "Implicit scaling of pointer arithmetic expressions can cause buffer overflow conditions. (CWE-468)"
        },
        "cpp/suspicious-add-sizeof": {
            "cwe": "CWE-468",
            "description": "Explicitly scaled pointer arithmetic expressions can cause buffer overflow conditions if the offset is also implicitly scaled. (CWE-468)"
        },
        "cpp/system-data-exposure": {
            "cwe": "CWE-497",
            "description": "Exposing system data or debugging information helps an adversary learn about the system and form an attack plan. (CWE-497)"
        },
        "cpp/dangerous-function-overflow": {
            "cwe": "CWE-242",
            "description": "Use of a standard library function that does not guard against buffer overflow. (CWE-242)"
        },
        "cpp/dangerous-cin": {
            "cwe": "CWE-676",
            "description": "Using `cin` without specifying the length of the input may be dangerous. (CWE-676)"
        },
        "cpp/potentially-dangerous-function": {
            "cwe": "CWE-676",
            "description": "Use of a standard library function that is not thread-safe. (CWE-676)"
        },
        "cpp/incorrect-string-type-conversion": {
            "cwe": "CWE-704",
            "description": "Casting a byte string to a wide-character string is likely to yield a string that is incorrectly terminated or aligned. This can lead to undefined behavior, including buffer overruns. (CWE-704)"
        },
        "cpp/world-writable-file-creation": {
            "cwe": "CWE-732",
            "description": "Creating a file that is world-writable can allow an attacker to write to the file. (CWE-732)"
        },
        "cpp/unsafe-dacl-security-descriptor": {
            "cwe": "CWE-732",
            "description": "Setting a DACL to NULL in a SECURITY_DESCRIPTOR will result in an unprotected object. If the DACL that belongs to the security descriptor of an object is set to NULL, a null DACL is created. A null DACL grants full access to any user who requests it; normal security checking is not performed with respect to the object. (CWE-732)"
        },
        "cpp/lock-order-cycle": {
            "cwe": "CWE-833",
            "description": "Locking mutexes in different orders in different threads can cause deadlock. (CWE-764, CWE-833)"
        },
        "cpp/twice-locked": {
            "cwe": "CWE-833",
            "description": "Calling the lock method of a mutex twice in succession might cause a deadlock. (CWE-764, CWE-833)"
        },
        "cpp/unreleased-lock": {
            "cwe": "CWE-833",
            "description": "A lock that is acquired one or more times without a matching number of unlocks may cause a deadlock. (CWE-764, CWE-833)"
        },
        "cpp/tainted-permissions-check": {
            "cwe": "CWE-807",
            "description": "Using untrusted inputs in a statement that makes a security decision makes code vulnerable to attack. (CWE-807)"
        },
        "cpp/infinite-loop-with-unsatisfiable-exit-condition": {
            "cwe": "CWE-835",
            "description": "A loop with an unsatisfiable exit condition could prevent the program from terminating, making it vulnerable to a denial of service attack. (CWE-835)"
        },
        "cpp/large-parameter": {
            "cwe": "-",
            "description": "An object larger than 64 bytes is passed by value to a function. Passing large objects by value unnecessarily use up scarce stack space, increase the cost of calling a function and can be a security risk. Use a const pointer to the object instead."
        },
        "cpp/new-array-delete-mismatch": {
            "cwe": "-",
            "description": "An array allocated with 'new[]' is being freed using 'delete'. Behavior in such cases is undefined and should be avoided. Use 'delete[]' when freeing arrays allocated with 'new[]'."
        },
        "cpp/new-delete-array-mismatch": {
            "cwe": "-",
            "description": "An object that was allocated with 'new' is being freed using 'delete[]'. Behavior in such cases is undefined and should be avoided. Use 'delete' instead."
        }
    }
}